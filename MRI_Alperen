import h5py
import numpy as np
from matplotlib import pyplot as plt
import fastmri
from fastmri.data import transforms as T
import os
from fastmri.data.subsample import RandomMaskFunc

directory = "D://multicoil_test\multicoil_test"


def show_coils(data, slice_nums, cmap=None):
    fig = plt.figure()
    for integer, num in enumerate(slice_nums):
        plt.subplot(1, len(slice_nums), integer + 1)
        plt.imshow(data[num], cmap=cmap)


real_images = []  # Initialize an empty list to hold real images

for filename in os.listdir(directory):
    file_name = os.path.join(directory, filename)
    hf = h5py.File(file_name, 'r')
    print('Keys:', list(hf.keys()))
    print('Attrs:', dict(hf.attrs))
    volume_kspace = hf['kspace'][()]
    print(volume_kspace.dtype)
    print(volume_kspace.shape)

    for i in range(0, volume_kspace.shape[0]):
        slice_kspace = volume_kspace[i]

        # show_coils(np.log(np.abs(slice_kspace) + 1e-9), [0, 5, 10])

        slice_kspace2 = T.to_tensor(slice_kspace)  # Convert from numpy array to pytorch tensor
        slice_image = fastmri.ifft2c(slice_kspace2)  # Apply Inverse Fourier Transform to get the complex image
        slice_image_abs = fastmri.complex_abs(slice_image)  # Compute absolute value to get a real image

        # show_coils(slice_image_abs, [0, 5, 10], cmap='gray')
        slice_image_rss = fastmri.rss(slice_image_abs, dim=0)

        mask_func = RandomMaskFunc(center_fractions=[0.04], accelerations=[8])  # Create the mask function object
        masked_kspace, mask, _ = T.apply_mask(slice_kspace2, mask_func)  # Apply the mask to k-space

        sampled_image = fastmri.ifft2c(masked_kspace)  # Apply Inverse Fourier Transform to get the complex image
        sampled_image_abs = fastmri.complex_abs(sampled_image)  # Compute absolute value to get a real image
        sampled_image_rss = fastmri.rss(sampled_image_abs, dim=0)

        real_images.append(np.abs(sampled_image_rss.numpy()))  # Append the real image to the list

        print("Added")


for i in real_images:
    plt.imshow(i, cmap='gray')
    plt.show()
